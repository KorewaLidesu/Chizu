services:
  db:
    image: postgis/postgis
    restart: always
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER?Variable not set} -h localhost -t 5 || exit 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 1m
  
  geoserver:
    image: kartoza/geoserver:${GS_VERSION?Variable not set}
    networks:
      - caddy
      - default
    volumes:
      - app-geoserver-data:/opt/geoserver/data_dir
    restart: always
    environment:
      - GEOSERVER_ADMIN_PASSWORD=${GEOSERVER_ADMIN_PASSWORD?Variable not set}
      - GEOSERVER_ADMIN_USER=${GEOSERVER_ADMIN_USER?Variable not set}
      - INITIAL_MEMORY=${INITIAL_MEMORY?Variable not set}
      - MAXIMUM_MEMORY=${MAXIMUM_MEMORY?Variable not set}
      - GEOSERVER_CONTEXT_ROOT = ${GEOSERVER_CONTEXT_ROOT}
      - HTTP_PROXY_NAME=${DOMAIN?Variable not set}
      - HTTP_PROXY_PORT=443
      - HTTP_SCHEME=https
      - STABLE_EXTENSIONS=${STABLE_EXTENSIONS}
      - COMMUNITY_EXTENSIONS=${COMMUNITY_EXTENSIONS}
      - POSTGRES_JNDI=TRUE
      - HOST=db
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASS=${POSTGRES_PASSWORD?Variable not set}
    depends_on:
      db:
        condition: service_healthy
    labels:
      caddy: ${DOMAIN?Variable not set}
      caddy.reverse_proxy: /geoserver* "{{upstreams 8080}}"
    healthcheck:
      test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null -u ${GEOSERVER_ADMIN_USER}:'${GEOSERVER_ADMIN_PASSWORD}' http://localhost:8080/geoserver/rest/about/version.xml"
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 1m

  backend:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    restart: always
    networks:
      - caddy
      - default
    build:
      context: ./backend
      args:
        - NODE_ENV=production
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - USERS_OPEN_REGISTRATION=${USERS_OPEN_REGISTRATION}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - SENTRY_DSN=${SENTRY_DSN}

    build:
      context: ./backend
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    platform: linux/amd64 # Patch for M1 Mac
    labels:
      caddy: ${DOMAIN?Variable not set}
      caddy.reverse_proxy: "/api/* /docs /redoc {{upstreams 80}}"

  frontend:
    image: '${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}'
    restart: always
    networks:
      - caddy
      - default
    build:
      context: ./frontend
      args:
        - VITE_API_URL=https://${DOMAIN?Variable not set}
        - NODE_ENV=production
    labels:
      caddy_0: ${DOMAIN?Variable not set}
      caddy_0.reverse_proxy: "{{upstreams 80}}"
      caddy_1: www.${DOMAIN?Variable not set}
      caddy_1.redir: https://${DOMAIN?Variable not set}{uri}

volumes:
  app-db-data:
  app-geoserver-data:

networks:
  caddy:
    # Allow setting it to false for testing
    external: true
